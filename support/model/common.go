package model

import (
	"bytes"
	"go/format"
	"gorm.io/gorm"
	"io/ioutil"
	"os"
	"strconv"
	"strings"
	"text/template"
)

func True() *bool {
	value := true
	return &value
}

func False() *bool {
	return new(bool)
}

// GenerateResource 生成默认资源
func GenerateResource(tx *gorm.DB) (err error) {
	if err = tx.AutoMigrate(&Resource{}); err != nil {
		return
	}
	data := []Resource{
		{
			Path:   "settings",
			Name:   "设置",
			Nav:    True(),
			Router: False(),
			Icon:   "setting",
		},
		{
			Parent: "settings",
			Path:   "settings/team",
			Name:   "组织成员",
			Nav:    True(),
			Router: True(),
		},
		{
			Parent: "settings",
			Path:   "settings/resource",
			Name:   "资源控制",
			Nav:    True(),
			Router: True(),
		},
	}
	if err = tx.Create(&data).Error; err != nil {
		return
	}
	return
}

const modelTpl = `
// Code generated by bit. DO NOT EDIT.

package model

import (
	"gorm.io/gorm"
	"time"
)

{{range .}}
    type {{title .Key}} struct {
` +
	"ID     uint   `json:\"id\"`\n" +
	"Status     *bool      `gorm:\"default:true\" json:\"status\"`\n" +
	"CreateTime time.Time  `gorm:\"autoCreateTime\" json:\"create_time\"`\n" +
	"UpdateTime time.Time  `gorm:\"autoUpdateTime\" json:\"update_time\"`\n" +
	`{{range .Schema}}` +
	"{{title .Key}} {{typ .Type}} `{{tag .}}`\n" +
	`{{end}}
}
{{end}}

func AutoMigrate(tx *gorm.DB, models ...string) {
	mapper := map[string]interface{}{
		{{range .}}"{{ .Key}}": &{{title .Key}}{},{{end}}
	}

	for _, model := range models {
		if mapper[model] != nil {
			tx.AutoMigrate(mapper[model])
		}
	}
}
`

func GenerateModel(tx *gorm.DB) (err error) {
	var datastores []Datastore
	if err = tx.Find(&datastores).Error; err != nil {
		return
	}
	var tmpl *template.Template
	if tmpl, err = template.New("model").Funcs(template.FuncMap{
		"title": title,
		"typ":   typ,
		"tag":   tag,
	}).Parse(modelTpl); err != nil {
		return
	}
	var buf bytes.Buffer
	if err = tmpl.Execute(&buf, datastores); err != nil {
		return
	}
	if _, err = os.Stat("./model"); os.IsNotExist(err) {
		os.Mkdir("./model", os.ModeDir)
	}
	b, _ := format.Source(buf.Bytes())
	if err = ioutil.WriteFile("./model/model_gen.go", b, os.ModePerm); err != nil {
		return
	}
	return
}

func title(s string) string {
	return strings.Title(s)
}

func typ(datatype string) string {
	switch datatype {
	case "bigint":
		return "int64"
	case "integer":
		return "int32"
	case "smallint":
		return "int16"
	case "numeric":
		return "float64"
	case "double":
		return "float64"
	case "real":
		return "float32"
	case "boolean":
		return "*bool"
	case "varchar":
		return "string"
	case "text":
		return "string"
	case "timestamptz":
		return "time.Time"
	case "uuid":
		return "string"
	case "jsonb":
		return "Object"
	case "json":
		return "Object"
	}
	return datatype
}

func tag(column Column) string {
	var b strings.Builder
	b.WriteString(`gorm:"type:`)
	b.WriteString(column.Type)
	if column.Length != 0 {
		b.WriteString(`(`)
		b.WriteString(strconv.Itoa(int(column.Length)))
		b.WriteString(`)`)
	}
	if column.Require {
		b.WriteString(`;not null`)
	}
	if column.Unique {
		b.WriteString(`;unique`)
	}
	if column.Default != "" {
		b.WriteString(`;default:`)
		b.WriteString(column.Default)
	}
	b.WriteString(`"`)
	if column.Hide {
		b.WriteString(` json:"-"`)
	}
	return b.String()
}
